HTTPbase = '<%= Settings.NodeHTTPBase %>';
WSbase = '<%= Settings.NodeWSBase %>';

var dispatcher;
var channel;
var heartbeat_timer;
var heartbeat_period = 5000; //milliseconds

main = function() {
    console.log('JS Loaded.');
    dispatcher = new WebSocketRails(WSbase + '/websocket');

    register_node = function(data) {
        var node = {
            uuid: $.cookie('uuid')
        };

        dispatcher.trigger('node.register', node, register_success, register_failure);
    }

    dispatcher.on_open = register_node

    register_success = function (data) {
        console.log('Register Success');

        //save the UUID
        $.cookie('uuid', data.uuid)

        // subscribe to the channel
        channel = dispatcher.subscribe(data.uuid);
        channel.bind('store_block', store_block);

        //***********************************************
        //FIX THIS
        //channel.bind('send_block', send_block);
        channel.bind('send_block', function(data){setTimeout(function(){send_block(data)}, Math.random() * 3000)});
        //***********************************************

        heartbeat_timer = setTimeout(send_heartbeat, heartbeat_period);

    };

    register_failure = function (data) {
        console.log('Register Failure:' + data.message);
        setTimeout(register_node, 10000);
    };

    store_block = function (data) {
        console.log('Storing data for block ' + data.block_id);
        localStorage[data.block_id] = data.block_data;
    };

    send_block = function (data) {
        console.log('Sending data for block ' + data.block_id);
        var block = {
            block_id: data.block_id,
            block_data: localStorage[data.block_id]
        };

        dispatcher.trigger('block.upload', block);
    };

    send_heartbeat = function(){
        blocks = []

        for (var key in localStorage){
            if (key.indexOf('fileblock') == 0) {
                var block = {
                    block_id: key,
                    md5: $.md5(localStorage[key])
                };

                blocks.push(block);
            }
        }

        dispatcher.trigger('node.heartbeat', blocks, clear_blocks);
        heartbeat_timer = setTimeout(send_heartbeat, heartbeat_period);
    };

    clear_blocks = function(data) {
        for (var index in data) {
            console.log('Clearing block ' + data[index]);
            localStorage.removeItem(data[index]);
        }
    };

}

if(localStorage) {
    main();
}

